{"version":3,"sources":["Components/Header.jsx","Components/Footer.jsx","Components/Templates/CardElement.jsx","Components/Homepage.jsx","App.js","serviceWorker.js","index.js","Media/profile-pic.png"],"names":["themeToggle","document","documentElement","style","current_mode","dark_mode","blue","gray","black","light_mode","white","Header","className","onClick","icon","faBars","size","color","Footer","window","matchMedia","matches","themeOnLoad","CardElement","title","info","link","href","Homepage","src","profile_pic","alt","faTwitter","faTwitch","faYoutube","faDiscord","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"qRAIA,SAASA,IAELC,SAASC,gBAAgBC,MADvBC,EACF,kBAA4CC,EAAUC,KAAtD,uBAAyED,EAAUE,KAAnF,2BAA0GF,EAAUG,MAApH,4BAA6IH,EAAUC,KAAvJ,0BAA6KD,EAAUC,MAEvL,kBAA4CG,EAAWC,MAAvD,uBAA2ED,EAAWH,KAAtF,2BAA6GG,EAAWC,MAAxH,4BAAiJD,EAAWH,KAA5J,0BAAkLG,EAAWD,OAG/LJ,GAAgBA,EAWlB,IAAIA,GAAe,EAEfK,EAAa,CACfD,MAAO,UACPF,KAAM,UACNI,MAAO,WAGLL,EAAY,CACdG,MAAO,UACPF,KAAM,UACNC,KAAM,WAKO,SAASI,IACtB,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YAAYC,QAASb,GAClC,kBAAC,IAAD,CAAiBc,KAAMC,IAAQC,KAAK,KAAKC,MAAM,iBAEjD,4CC3CO,SAASC,IACtB,OAAO,yBAAKN,UAAU,YDWxB,WACE,GACEO,OAAOC,YACPD,OAAOC,WAAW,gCAAgCC,QAE3CrB,IAiBXsB,G,oBEjCe,SAASC,EAAT,GAAyD,IAAlCP,EAAiC,EAAjCA,KAAMQ,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAMX,EAAc,EAAdA,KAAMY,EAAQ,EAARA,KAC7D,OACE,uBAAGC,KAAMD,GACP,yBAAKd,UAAS,oBAAeI,IAC3B,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,cACb,4BAAKY,IAEP,yBAAKZ,UAAU,aACb,2BAAIa,KAGR,kBAAC,IAAD,CAAiBX,KAAMA,EAAME,KAAK,KAAKC,MAAM,wB,WCLtC,SAASW,IACtB,OACE,yBAAKhB,UAAU,YACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,gBACb,yBAAKiB,IAAKC,IAAaC,IAAI,cAE7B,yBAAKnB,UAAU,gBACb,wCACA,mDAGJ,yBAAKA,UAAU,kBACb,kBAACW,EAAD,CACEC,MAAM,UACNC,KAAK,cACLT,KAAK,QACLF,KAAMkB,IACNN,KAAK,iCAEP,kBAACH,EAAD,CACEC,MAAM,SACNC,KAAK,eACLT,KAAK,QACLF,KAAMmB,IACNP,KAAK,mCAEP,kBAACH,EAAD,CACEC,MAAM,UACNC,KAAK,oBACLT,KAAK,QACLF,KAAMoB,IACNR,KAAK,6DAEP,kBAACH,EAAD,CACEC,MAAM,UACNC,KAAK,qBACLT,KAAK,QACLF,KAAMqB,IACNT,KAAK,yCC1CA,SAASU,IACtB,OACE,yBAAKxB,UAAU,OACb,kBAACD,EAAD,MACA,kBAACiB,EAAD,MACA,kBAACV,EAAD,OCAcmB,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1C,SAAS2C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.7dc3c868.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction themeToggle() {\r\n  if (current_mode) {\r\n    document.documentElement.style = `--text: ${dark_mode.blue}; --banner: ${dark_mode.gray}; --background: ${dark_mode.black}; --header-text: ${dark_mode.blue}; --main-text: ${dark_mode.blue}`;\r\n  } else {\r\n    document.documentElement.style = `--text: ${light_mode.white}; --banner: ${light_mode.blue}; --background: ${light_mode.white}; --header-text: ${light_mode.blue}; --main-text: ${light_mode.black}`;\r\n  }\r\n\r\n  current_mode = !current_mode;\r\n}\r\n\r\nfunction themeOnLoad() {\r\n  if (\r\n    window.matchMedia &&\r\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches\r\n  )\r\n    return themeToggle();\r\n}\r\n\r\nlet current_mode = true;\r\n\r\nlet light_mode = {\r\n  black: \"#272727\",\r\n  blue: \"#7d83ff\",\r\n  white: \"#f7f7ff\",\r\n};\r\n\r\nlet dark_mode = {\r\n  black: \"#1c1d21\",\r\n  blue: \"#7d83ff\",\r\n  gray: \"#292f36\",\r\n};\r\n\r\nthemeOnLoad();\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"Header\">\r\n      <div className=\"header-title\">\r\n        <div className=\"icon-menu\" onClick={themeToggle}>\r\n          <FontAwesomeIcon icon={faBars} size=\"2x\" color=\"var(--text)\" />\r\n        </div>\r\n        <h1>wara works</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Footer() {\r\n  return <div className=\"Footer\"></div>;\r\n}\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function CardElement({ size, title, info, icon, link }) {\r\n  return (\r\n    <a href={link}>\r\n      <div className={`card card-${size}`}>\r\n        <div className=\"card-text\">\r\n          <div className=\"card-title\">\r\n            <h1>{title}</h1>\r\n          </div>\r\n          <div className=\"card-info\">\r\n            <p>{info}</p>\r\n          </div>\r\n        </div>\r\n        <FontAwesomeIcon icon={icon} size=\"3x\" color=\"var(--background)\" />\r\n      </div>\r\n    </a>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport profile_pic from \"../Media/profile-pic.png\";\r\nimport CardElement from \"./Templates/CardElement\";\r\nimport {\r\n  faTwitter,\r\n  faTwitch,\r\n  faYoutube,\r\n  faDiscord,\r\n} from \"@fortawesome/fontawesome-free-brands\";\r\n\r\nexport default function Homepage() {\r\n  return (\r\n    <div className=\"Homepage\">\r\n      <div className=\"banner\">\r\n        <div className=\"banner-image\">\r\n          <img src={profile_pic} alt=\"rawrneru\" />\r\n        </div>\r\n        <div className=\"banner-title\">\r\n          <h1>rawrneru</h1>\r\n          <p>creates cool stuff</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"card-container\">\r\n        <CardElement\r\n          title=\"twitter\"\r\n          info=\"shitposting\"\r\n          size=\"small\"\r\n          icon={faTwitter}\r\n          link=\"https://twitter.com/rawrneru\"\r\n        />\r\n        <CardElement\r\n          title=\"twitch\"\r\n          info=\"video gaming\"\r\n          size=\"small\"\r\n          icon={faTwitch}\r\n          link=\"https://www.twitch.tv/rawrneru\"\r\n        />\r\n        <CardElement\r\n          title=\"youtube\"\r\n          info=\"content uploading\"\r\n          size=\"small\"\r\n          icon={faYoutube}\r\n          link=\"https://www.youtube.com/channel/UCEfmljfyo9QZt-w10QJLoKw\"\r\n        />\r\n        <CardElement\r\n          title=\"discord\"\r\n          info=\"social interaction\"\r\n          size=\"small\"\r\n          icon={faDiscord}\r\n          link=\"https://discord.com/invite/N3mHtrm\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./Stylesheets/reset.css\";\nimport \"./Stylesheets/App.css\";\nimport Header from \"./Components/Header\";\nimport Footer from \"./Components/Footer\";\nimport Homepage from \"./Components/Homepage\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Homepage />\n      <Footer />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Stylesheets/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profile-pic.4aaf0e5f.png\";"],"sourceRoot":""}